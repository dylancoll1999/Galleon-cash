// === PWA Service Worker Registration START ===
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./sw.js')
      .then(registration => {
        console.log('ServiceWorker registration successful with scope: ', registration.scope);
      })
      .catch(error => {
        console.error('ServiceWorker registration failed: ', error);
      });
  });
} else {
    console.log('Service Worker not supported in this browser.');
}
// === PWA Service Worker Registration END ===


document.addEventListener('DOMContentLoaded', async () => {
    // --- Default Settings ---
    const DEFAULT_FLOAT = 200.00;
    const DEFAULT_DISCREPANCY_THRESHOLD = 10.00;
    const DEFAULT_HIGH_TWENTY_THRESHOLD = 1000.00;

    // --- Configuration / Constants ---
    const DENOM_IDS = ['50', '20', '10', '5', '2', '1', '0p50', '0p20', '0p10', '0p05'];
    const NUKE_PASSWORD = "Nuke";
    const BACKUP_REMINDER_DAYS = 30;
    const WEEKLY_UPDATE_DEBOUNCE_MS = 3000; // <-- Debounce delay: 3 seconds

    // --- Settings Variables ---
    let currentFloat = DEFAULT_FLOAT;
    let currentDiscrepancyThreshold = DEFAULT_DISCREPANCY_THRESHOLD;
    let currentHighTwentyThreshold = DEFAULT_HIGH_TWENTY_THRESHOLD;
    let hideTill2 = false;
    let hideTill3 = false;

    // --- Dexie DB Setup ---
    const db = new Dexie('GalleonBarDB');
    db.version(3).stores({
         dailyEntries: 'date',
         userNames: '++id, name'
     }).upgrade(async tx => { /* ... upgrade logic ... */ });
     db.version(2).stores({ dailyEntries: 'date', userNames: '++id, name' });

    // --- Early Element References ---
    const statusMessageDiv = document.getElementById('status-message');

    // --- Attempt to Open DB ---
    try { await db.open(); console.log("Dexie DB Opened Successfully"); }
    catch (err) { console.error("Failed to open/upgrade Dexie DB:", err); displayStatusMessage(`Error: Could not initialize database. ${err.message}. Check console/refresh.`, "error", 0); }

    // --- Remaining Element References ---
    const dateInput = document.getElementById('current-date');
    const fullDateDisplay = document.getElementById('full-date-display');
    const printButton = document.getElementById('print-button');
    const csvFileInput = document.getElementById('csv-import-file');
    const summaryTitle = document.getElementById('summary-title');
    const labelTotalZ = document.getElementById('label-total-z');
    const labelTotalDiff = document.getElementById('label-total-difference');
    const labelPdqTotal = document.getElementById('label-pdq-total');
    const labelTotalBanked = document.getElementById('label-total-banked');
    const totalZSpan = document.getElementById('total-z');
    const totalDifferenceSpan = document.getElementById('total-difference');
    const pdqTotalSpan = document.getElementById('pdq-total-display');
    const totalBankedSpan = document.getElementById('total-banked-display');
    const saveButton = document.getElementById('save-day');
    const signedByInput = document.getElementById('signed-by');
    const namesList = document.getElementById('names-list');
    const jsonImportInput = document.getElementById('json-import-file');
    const goToTodayButton = document.getElementById('go-today');
    const devModalButton = document.getElementById('dev-modal-button');
    const devModal = document.getElementById('dev-modal');
    const devModalCloseButton = devModal.querySelector('.modal-close-button');
    const devModalStatus = document.getElementById('dev-modal-status');
    const themeToggleButton = document.getElementById('theme-toggle');
    const busyOverlay = document.getElementById('busy-overlay');
    const floatLabelCell = document.getElementById('float-label-cell');
    const floatSettingInput = document.getElementById('setting-float-amount');
    const thresholdSettingInput = document.getElementById('setting-discrepancy-threshold');
    const highTwentySettingInput = document.getElementById('setting-high-twenty-threshold');
    const hideTill2Checkbox = document.getElementById('setting-hide-till2');
    const hideTill3Checkbox = document.getElementById('setting-hide-till3');
    const resetSettingsButton = document.getElementById('reset-settings-button');
    const notesTextArea = document.getElementById('day-notes');
    const notesIndicator = document.getElementById('notes-exist-indicator');
    const backupReminderDiv = document.getElementById('backup-reminder');

    // --- Enter Key Navigation ---
    const till1SequenceIds = ['t1-50','t1-20','t1-10','t1-5','t1-2','t1-1','t1-0p50','t1-0p20','t1-0p10','t1-0p05','t1-invoices','t1-zreceipt'];
    const till2SequenceIds = ['t2-50','t2-20','t2-10','t2-5','t2-2','t2-1','t2-0p50','t2-0p20','t2-0p10','t2-0p05','t2-invoices','t2-zreceipt'];
    const till3SequenceIds = ['t3-50','t3-20','t3-10','t3-5','t3-2','t3-1','t3-0p50','t3-0p20','t3-0p10','t3-0p05','t3-invoices','t3-zreceipt'];
    let till1SequenceElements = [];
    let till2SequenceElements = [];
    let till3SequenceElements = [];
    const signedByElement = document.getElementById('signed-by');
    const dayNotesElement = document.getElementById('day-notes');
    let combinedNavSequence = [];

    // === Debounce Utility Function ===
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                console.log(`%cDebounce timer finished! Attempting to execute: ${func.name}`, 'color: blue; font-weight: bold;'); // DEBUG LOG
                clearTimeout(timeout);
                func.apply(this, args);
            };
            // console.log(`Debounce: Clearing previous timer (if any)`); // DEBUG LOG (Optional - can be noisy)
            clearTimeout(timeout);
            // console.log(`Debounce: Setting new timer for ${wait}ms`); // DEBUG LOG (Optional - can be noisy)
            timeout = setTimeout(later, wait);
        };
    };

    // --- Helper Functions ---
    function formatCurrency(value) { const num = Number(value); return `£${isNaN(num) ? '0.00' : num.toFixed(2)}`; }
    function updateDifferenceCell(elementId, value) { const cell = document.getElementById(elementId); if (!cell) return; const num = Number(value) || 0; cell.textContent = formatCurrency(num); cell.classList.remove('difference-positive', 'difference-negative', 'large-discrepancy'); if (num > 0.005) { cell.classList.add('difference-positive'); } else if (num < -0.005) { cell.classList.add('difference-negative'); } if (Math.abs(num) >= currentDiscrepancyThreshold) { cell.classList.add('large-discrepancy'); } }
    function updateSummaryDifferenceSpan(spanElement, value) { if (!spanElement) return spanElement; const num = Number(value) || 0; const formattedCurrency = formatCurrency(num); const UP_ARROW = '▲ '; const DOWN_ARROW = '▼ '; let arrowSymbol = ''; const VERY_NEGATIVE_THRESHOLD = -5.00; spanElement.classList.remove('difference-positive', 'difference-negative', 'large-discrepancy', 'difference-very-negative'); if (num > 0.005) { spanElement.classList.add('difference-positive'); arrowSymbol = UP_ARROW; } else if (num < -0.005) { spanElement.classList.add('difference-negative'); arrowSymbol = DOWN_ARROW; if (num <= VERY_NEGATIVE_THRESHOLD) { spanElement.classList.add('difference-very-negative'); } } if (Math.abs(num) >= currentDiscrepancyThreshold) { spanElement.classList.add('large-discrepancy'); } spanElement.textContent = arrowSymbol + formattedCurrency; return spanElement; }
    let statusTimeout; function displayStatusMessage(message, type = 'info', duration = 3000) { if (!statusMessageDiv) { console.warn("displayStatusMessage called before statusMessageDiv ready. Msg:", message); return; } clearTimeout(statusTimeout); statusMessageDiv.textContent = message; statusMessageDiv.className = 'status-message'; if (type === 'success') { statusMessageDiv.classList.add('status-success'); } else if (type === 'error') { statusMessageDiv.classList.add('status-error'); } if (duration > 0) { statusTimeout = setTimeout(() => { statusMessageDiv.textContent = ''; statusMessageDiv.className = 'status-message'; }, duration); } }
    function formatDateToYYYYMMDD(date) { const year = date.getFullYear(); const month = String(date.getMonth() + 1).padStart(2, '0'); const day = String(date.getDate()).padStart(2, '0'); return `${year}-${month}-${day}`; }
    function showBusyIndicator(message = 'Processing...') { console.log(`Busy Indicator ON: ${message}`); if (!busyOverlay) return; busyOverlay.style.display = 'flex'; document.body.classList.add('busy'); }
    function hideBusyIndicator() { console.log("Busy Indicator OFF"); if (!busyOverlay) return; busyOverlay.style.display = 'none'; document.body.classList.remove('busy'); }
    function getDayWithSuffix(day) { if (day > 3 && day < 21) return day + 'th'; switch (day % 10) { case 1: return day + "st"; case 2: return day + "nd"; case 3: return day + "rd"; default: return day + "th"; } }
    function updateNotesIndicator(notesContent) { if (!notesIndicator) return; if (notesContent?.trim()) { notesIndicator.classList.add('notes-indicator-visible'); notesIndicator.title = "Notes exist for this day"; } else { notesIndicator.classList.remove('notes-indicator-visible'); notesIndicator.title = ""; } }
    function checkBackupReminder() { if (!backupReminderDiv) return; const lastBackupTime = localStorage.getItem('galleonLastBackupTimestamp'); if (!lastBackupTime) { backupReminderDiv.textContent = 'Reminder: Consider exporting a JSON backup to protect your data.'; console.log('Backup reminder: No previous backup timestamp found.'); return; } const lastBackupTimestamp = parseInt(lastBackupTime, 10); if (isNaN(lastBackupTimestamp)) { backupReminderDiv.textContent = 'Reminder: Could not read last backup time. Consider exporting backup.'; console.warn('Backup reminder: Invalid timestamp found.'); localStorage.removeItem('galleonLastBackupTimestamp'); return; } const daysSinceLastBackup = (Date.now() - lastBackupTimestamp) / (1000 * 60 * 60 * 24); if (daysSinceLastBackup > BACKUP_REMINDER_DAYS) { backupReminderDiv.textContent = `Reminder: Last JSON backup was ~${Math.round(daysSinceLastBackup)} days ago. Consider exporting soon.`; console.log(`Backup reminder: Last backup ~${Math.round(daysSinceLastBackup)} days ago.`); } else { backupReminderDiv.textContent = ''; console.log(`Backup reminder: Last backup within ${BACKUP_REMINDER_DAYS} days.`); } }

    // --- Settings Functions ---
    function saveSetting(key, value) { try { localStorage.setItem('galleonAppSettings_' + key, value); console.log(`Setting saved: ${key} = ${value}`); } catch (e) { console.error("Error saving setting:", e); displayStatusMessage("Error saving setting.", "error"); } }
    function applySettings() { console.log("Applying settings..."); if (floatLabelCell) { floatLabelCell.textContent = `-£${currentFloat.toFixed(2)} Float`; floatLabelCell.title = `Actual cash (Total Cash - £${currentFloat.toFixed(2)} float)`; } console.log(`Thresholds: Discrepancy £${currentDiscrepancyThreshold}, High £20 £${currentHighTwentyThreshold}`); document.body.classList.toggle('till2-hidden', hideTill2); document.body.classList.toggle('till3-hidden', hideTill3); console.log(`Hide Tills: T2=${hideTill2}, T3=${hideTill3}`); buildCombinedSequence(); const dailyTotalsData = calculateAndDisplayDailySummary(); const dateVal = dateInput.value; if (dateVal) { const dayOfWeek = new Date(dateVal + 'T00:00:00Z').getUTCDay(); if (dayOfWeek === 0) { console.log("Applying settings on Sunday, queueing potential weekly update."); debouncedCalculateAndDisplayWeeklySummary(dateVal); } else { if (summaryTitle && summaryTitle.textContent.startsWith("Weekly")) calculateAndDisplayDailySummary(); } } }
    function loadSettings() { console.log("Loading settings..."); try { currentFloat = parseFloat(localStorage.getItem('galleonAppSettings_floatAmount')) || DEFAULT_FLOAT; currentDiscrepancyThreshold = parseFloat(localStorage.getItem('galleonAppSettings_discrepancyThreshold')) || DEFAULT_DISCREPANCY_THRESHOLD; currentHighTwentyThreshold = parseFloat(localStorage.getItem('galleonAppSettings_highTwentyThreshold')) || DEFAULT_HIGH_TWENTY_THRESHOLD; hideTill2 = localStorage.getItem('galleonAppSettings_hideTill2') === 'true'; hideTill3 = localStorage.getItem('galleonAppSettings_hideTill3') === 'true'; if (floatSettingInput) floatSettingInput.value = currentFloat.toFixed(2); if (thresholdSettingInput) thresholdSettingInput.value = currentDiscrepancyThreshold.toFixed(2); if (highTwentySettingInput) highTwentySettingInput.value = currentHighTwentyThreshold.toFixed(2); if (hideTill2Checkbox) hideTill2Checkbox.checked = hideTill2; if (hideTill3Checkbox) hideTill3Checkbox.checked = hideTill3; console.log("Settings loaded:", { currentFloat, currentDiscrepancyThreshold, currentHighTwentyThreshold, hideTill2, hideTill3 }); applySettings(); } catch (e) { console.error("Error loading settings:", e); displayStatusMessage("Error loading settings.", "error"); currentFloat = DEFAULT_FLOAT; currentDiscrepancyThreshold = DEFAULT_DISCREPANCY_THRESHOLD; currentHighTwentyThreshold = DEFAULT_HIGH_TWENTY_THRESHOLD; hideTill2 = false; hideTill3 = false; applySettings(); } }
    function resetSettings() { if (confirm("Reset all settings to default?")) { console.log("Resetting settings..."); currentFloat = DEFAULT_FLOAT; currentDiscrepancyThreshold = DEFAULT_DISCREPANCY_THRESHOLD; currentHighTwentyThreshold = DEFAULT_HIGH_TWENTY_THRESHOLD; hideTill2 = false; hideTill3 = false; localStorage.removeItem('galleonAppSettings_floatAmount'); localStorage.removeItem('galleonAppSettings_discrepancyThreshold'); localStorage.removeItem('galleonAppSettings_highTwentyThreshold'); localStorage.removeItem('galleonAppSettings_hideTill2'); localStorage.removeItem('galleonAppSettings_hideTill3'); if (floatSettingInput) floatSettingInput.value = currentFloat.toFixed(2); if (thresholdSettingInput) thresholdSettingInput.value = currentDiscrepancyThreshold.toFixed(2); if (highTwentySettingInput) highTwentySettingInput.value = currentHighTwentyThreshold.toFixed(2); if (hideTill2Checkbox) hideTill2Checkbox.checked = hideTill2; if (hideTill3Checkbox) hideTill3Checkbox.checked = hideTill3; applySettings(); displayStatusMessage("Settings reset to defaults.", "success"); if (devModalStatus) devModalStatus.textContent = "Settings reset."; } }

    // --- Input Validation ---
    let isFormValid = true;
    function validateNumericInput(event) { const input = event.target; if (input.type !== 'number' || input.readOnly || input.disabled) return; const allowStepMismatch = input.classList.contains('pdq-input'); if (!allowStepMismatch && input.validity.stepMismatch) console.warn("Step mismatch:", input.id || input.classList); let value = input.value.trim(); let isValid = true; let errorMessage = ''; let isHighWarning = false; input.classList.remove('input-warning'); if (value === '') { input.classList.remove('input-error'); if (event.type === 'blur' && (input.step === '0.01' || input.classList.contains('pdq-input'))) input.value = '0.00'; } else { const numValue = parseFloat(value); if (isNaN(numValue)) { isValid = false; errorMessage = 'Invalid number'; } else if (numValue < 0) { isValid = false; errorMessage = 'Value cannot be negative'; } else { if (input.id && input.id.includes('-20') && numValue >= currentHighTwentyThreshold) { isHighWarning = true; const tillMatch = input.id.match(/t([1-3])-20/); const tillNum = tillMatch ? ` in Till ${tillMatch[1]}` : ''; displayStatusMessage(`Warning: High value (£${numValue.toFixed(2)}) for £20 notes${tillNum}. Correct?`, 'info', 5000); if (event.type === 'blur') { input.classList.add('flash-warning'); setTimeout(() => { input.classList.remove('flash-warning'); }, 850); } else { input.classList.add('input-warning'); } } if (event.type === 'blur' && (input.step === '0.01' || input.classList.contains('pdq-input'))) input.value = numValue.toFixed(2); } if (!isValid) { input.classList.add('input-error'); console.warn(`Validation Error on ${input.id || input.classList}: ${errorMessage}`); } else { input.classList.remove('input-error'); if (!isHighWarning) input.classList.remove('input-warning'); } } checkFormValidity(); }
    function checkFormValidity() { const inputsToCheck = document.querySelectorAll('#reconciliation-table input[type="number"]'); isFormValid = Array.from(inputsToCheck).every(input => !input.classList.contains('input-error')); }

    // --- Calculation Functions ---
    function calculateTillTotal(tillClass, dataObject = null) { let total = 0; DENOM_IDS.forEach(denomId => { const inputId = `${tillClass.replace('till', 't')}-${denomId}`; let valueStr; if (dataObject) { valueStr = dataObject[inputId]; } else { const inputElement = document.getElementById(inputId); valueStr = inputElement ? inputElement.value : '0'; } total += parseFloat(valueStr) || 0; }); return total; }
    function calculateTotalsFromData(data) { if (!data) return { dailyZ: 0, dailyPDQ: 0, dailyDifference: 0, dailyBanked: 0 }; const safeGet = (key) => parseFloat(data[key]) || 0; const getPdqTotal = (tillNum) => { const pdqKey = `t${tillNum}-pdq-values`; if (Array.isArray(data[pdqKey])) return data[pdqKey].reduce((sum, val) => sum + (parseFloat(val) || 0), 0); else if (data.hasOwnProperty(`t${tillNum}-card`)) return parseFloat(data[`t${tillNum}-card`]) || 0; return 0; }; const tc1 = calculateTillTotal('till1', data), tc2 = hideTill2 ? 0 : calculateTillTotal('till2', data), tc3 = hideTill3 ? 0 : calculateTillTotal('till3', data); const c1 = getPdqTotal(1), c2 = hideTill2 ? 0 : getPdqTotal(2), c3 = hideTill3 ? 0 : getPdqTotal(3); const z1 = safeGet('t1-zreceipt'), z2 = hideTill2 ? 0 : safeGet('t2-zreceipt'), z3 = hideTill3 ? 0 : safeGet('t3-zreceipt'); const inv1 = safeGet('t1-invoices'), inv2 = hideTill2 ? 0 : safeGet('t2-invoices'), inv3 = hideTill3 ? 0 : safeGet('t3-invoices'); const isDataEnteredT1 = (tc1 !== 0 || c1 !== 0 || z1 !== 0 || inv1 !== 0), isDataEnteredT2 = (!hideTill2 && (tc2 !== 0 || c2 !== 0 || z2 !== 0 || inv2 !== 0)), isDataEnteredT3 = (!hideTill3 && (tc3 !== 0 || c3 !== 0 || z3 !== 0 || inv3 !== 0)); const ac1 = tc1 - currentFloat, ac2 = tc2 - currentFloat, ac3 = tc3 - currentFloat; const effectiveZ1 = Math.max(0, z1); const effectiveZ2 = Math.max(0, z2); const effectiveZ3 = Math.max(0, z3); const rawDiff1 = ac1 - (effectiveZ1 - c1 - inv1), rawDiff2 = ac2 - (effectiveZ2 - c2 - inv2), rawDiff3 = ac3 - (effectiveZ3 - c3 - inv3); let dailyZ = 0; if (isDataEnteredT1) dailyZ += z1; if (isDataEnteredT2) dailyZ += z2; if (isDataEnteredT3) dailyZ += z3; let dailyPDQ = 0; if (isDataEnteredT1) dailyPDQ += c1; if (isDataEnteredT2) dailyPDQ += c2; if (isDataEnteredT3) dailyPDQ += c3; let dailyDifference = 0; if (isDataEnteredT1) dailyDifference += rawDiff1; if (isDataEnteredT2) dailyDifference += rawDiff2; if (isDataEnteredT3) dailyDifference += rawDiff3; let dailyBanked = 0; if (isDataEnteredT1) dailyBanked += ac1; if (isDataEnteredT2) dailyBanked += ac2; if (isDataEnteredT3) dailyBanked += ac3; return { dailyZ, dailyPDQ, dailyDifference, dailyBanked }; }
    function calculateAndDisplayFloatSuggestion(tillNum) { const suggestionDiv = document.getElementById(`t${tillNum}-float-suggestion`); if (!suggestionDiv || (tillNum===2 && hideTill2) || (tillNum===3 && hideTill3) ) { if(suggestionDiv) suggestionDiv.textContent = ''; return; } let totalCash = 0; const availableDenominations = {}; DENOM_IDS.forEach(denomId => { const input = document.getElementById(`t${tillNum}-${denomId}`); const value = parseFloat(input?.value) || 0; availableDenominations[denomId] = value; totalCash += value; }); const amountToRemovePence = Math.round((totalCash - currentFloat) * 100); if (amountToRemovePence <= 0) { suggestionDiv.textContent = `Till ${tillNum}: Float OK / Below Target`; suggestionDiv.style.color = 'var(--positive-color)'; return; } let remainingToRemovePence = amountToRemovePence; const suggestionParts = []; const denominationValuesPence = { '50': 5000, '20': 2000, '10': 1000, '5': 500, '2': 200, '1': 100, '0p50': 50, '0p20': 20, '0p10': 10, '0p05': 5 }; DENOM_IDS.forEach(denomId => { const denomValuePence = denominationValuesPence[denomId]; const availableAmountPence = Math.round(availableDenominations[denomId] * 100); if (denomValuePence > 0 && availableAmountPence > 0 && remainingToRemovePence >= denomValuePence) { const maxUnitsAvailable = Math.floor(availableAmountPence / denomValuePence); const unitsNeeded = Math.floor(remainingToRemovePence / denomValuePence); const unitsToRemove = Math.min(maxUnitsAvailable, unitsNeeded); if (unitsToRemove > 0) { let label = ''; if (denomId.startsWith('0p')) { label = denomId.substring(2) + 'p'; } else { label = `£${denomId}`; } suggestionParts.push(`${unitsToRemove} x ${label}`); remainingToRemovePence -= unitsToRemove * denomValuePence; } } }); if (suggestionParts.length > 0) { if (remainingToRemovePence < 1 && remainingToRemovePence > -1) { suggestionDiv.textContent = `Till ${tillNum}: To leave £${currentFloat.toFixed(2)}, remove: ${suggestionParts.join(', ')}`; suggestionDiv.style.color = 'var(--warning-border)'; } else { const removedAmount = (amountToRemovePence - remainingToRemovePence) / 100; suggestionDiv.textContent = `Till ${tillNum}: Remove ${suggestionParts.join(', ')} (= ${formatCurrency(removedAmount)}). Remainder needed: ${formatCurrency(remainingToRemovePence/100)}.`; suggestionDiv.style.color = 'var(--negative-color)'; } } else if (amountToRemovePence > 0) { suggestionDiv.textContent = `Till ${tillNum}: Cannot make ${formatCurrency(amountToRemovePence/100)} from available cash.`; suggestionDiv.style.color = 'var(--negative-color)'; } }
    function getFormDataFromDOM() { const formData = { t1_pdq_total: 0, t2_pdq_total: 0, t3_pdq_total: 0, }; [1, 2, 3].forEach(t => { DENOM_IDS.forEach(id => { const inputElement = document.getElementById(`t${t}-${id}`); formData[`t${t}-${id}`] = parseFloat(inputElement?.value) || 0; }); const pdqInputs = document.querySelectorAll(`.till${t}-pdq`); let pdqTotal = 0; pdqInputs.forEach(input => pdqTotal += parseFloat(input.value) || 0); formData[`t${t}_pdq_total`] = pdqTotal; const invoicesInput = document.getElementById(`t${t}-invoices`); const zInput = document.getElementById(`t${t}-zreceipt`); formData[`t${t}-invoices`] = parseFloat(invoicesInput?.value) || 0; formData[`t${t}-zreceipt`] = parseFloat(zInput?.value) || 0; }); return formData; }
    function calculateDailyTotals(formData) { const totals = { t1: { cash: 0, actual: 0, card: formData.t1_pdq_total, invoices: formData['t1-invoices'], z: formData['t1-zreceipt'], diff: 0, hasData: false }, t2: { cash: 0, actual: 0, card: formData.t2_pdq_total, invoices: formData['t2-invoices'], z: formData['t2-zreceipt'], diff: 0, hasData: false }, t3: { cash: 0, actual: 0, card: formData.t3_pdq_total, invoices: formData['t3-invoices'], z: formData['t3-zreceipt'], diff: 0, hasData: false }, summary: { z: 0, pdq: 0, diff: 0, banked: 0 } }; for (let t = 1; t <= 3; t++) { DENOM_IDS.forEach(id => { totals[`t${t}`].cash += formData[`t${t}-${id}`] || 0; }); const isVisible = !((t === 2 && hideTill2) || (t === 3 && hideTill3)); totals[`t${t}`].hasData = isVisible && (totals[`t${t}`].cash !== 0 || totals[`t${t}`].card !== 0 || totals[`t${t}`].z !== 0 || totals[`t${t}`].invoices !== 0); totals[`t${t}`].actual = totals[`t${t}`].cash - currentFloat; const effectiveZ = Math.max(0, totals[`t${t}`].z); totals[`t${t}`].diff = totals[`t${t}`].actual - (effectiveZ - totals[`t${t}`].card - totals[`t${t}`].invoices); if (totals[`t${t}`].hasData) { totals.summary.z += totals[`t${t}`].z; totals.summary.pdq += totals[`t${t}`].card; totals.summary.diff += totals[`t${t}`].diff; totals.summary.banked += totals[`t${t}`].actual; } } return totals; }
    // --- updateUIDailySummary ONLY handles main Summary Section (Daily View) ---
    function updateUIDailySummary(totals) {
        console.log("DEBUG: updateUIDailySummary running - Setting Daily View"); // DEBUG LOG
        if (summaryTitle) summaryTitle.textContent = "Overall Summary";
        if (labelTotalZ) labelTotalZ.textContent = "Total Z:";
        if (labelTotalDiff) labelTotalDiff.textContent = "Total Difference:";
        if (labelPdqTotal) labelPdqTotal.textContent = "PDQ Total:";
        if (labelTotalBanked) labelTotalBanked.textContent = "Total Banked:";
        if (totalZSpan) totalZSpan.textContent = formatCurrency(totals.summary.z);
        if (totalDifferenceSpan) updateSummaryDifferenceSpan(totalDifferenceSpan, totals.summary.diff);
        if (pdqTotalSpan) pdqTotalSpan.textContent = formatCurrency(totals.summary.pdq);
        if (totalBankedSpan) totalBankedSpan.textContent = formatCurrency(totals.summary.banked);
    }
    // --- updateTillFooters updates ONLY table footers ---
    function updateTillFooters(totals) {
        // console.log("DEBUG: updateTillFooters running"); // DEBUG LOG (Optional)
        document.getElementById('t1-total-cash').textContent = formatCurrency(totals.t1.cash);
        document.getElementById('t1-actual-cash').textContent = (totals.t1.cash > 0) ? formatCurrency(totals.t1.actual) : formatCurrency(0);
        updateDifferenceCell('t1-difference', totals.t1.hasData ? totals.t1.diff : 0);
        document.getElementById('t2-total-cash').textContent = !hideTill2 ? formatCurrency(totals.t2.cash) : '-';
        document.getElementById('t2-actual-cash').textContent = !hideTill2 ? ((totals.t2.cash > 0) ? formatCurrency(totals.t2.actual) : formatCurrency(0)) : '-';
        updateDifferenceCell('t2-difference', (!hideTill2 && totals.t2.hasData) ? totals.t2.diff : 0);
        document.getElementById('t3-total-cash').textContent = !hideTill3 ? formatCurrency(totals.t3.cash) : '-';
        document.getElementById('t3-actual-cash').textContent = !hideTill3 ? ((totals.t3.cash > 0) ? formatCurrency(totals.t3.actual) : formatCurrency(0)) : '-';
        updateDifferenceCell('t3-difference', (!hideTill3 && totals.t3.hasData) ? totals.t3.diff : 0);
        calculateAndDisplayFloatSuggestion(1); calculateAndDisplayFloatSuggestion(2); calculateAndDisplayFloatSuggestion(3);
    }
    // === MODIFIED calculateAndDisplayDailySummary === (Triggers debounced weekly update on Sunday)
    function calculateAndDisplayDailySummary() {
        // console.log("DEBUG: calculateAndDisplayDailySummary running"); // DEBUG LOG (Optional)
        let totals = null;
        try {
            const formData = getFormDataFromDOM();
            totals = calculateDailyTotals(formData);
            updateTillFooters(totals); // Always update table footers instantly
            updateUIDailySummary(totals); // Always update main summary instantly to DAILY view

            const currentDate = new Date(dateInput.value + 'T12:00:00');
            const isSunday = currentDate.getUTCDay() === 0;

            if (isSunday) { // If it IS Sunday, trigger the debounced function to update to combined view later
                console.log("DEBUG: Sunday input detected, queueing debounced weekly update..."); // DEBUG LOG
                debouncedCalculateAndDisplayWeeklySummary(dateInput.value);
            }

            // Z/Card mismatch validation
            [1, 2, 3].forEach(t => { if ((t === 2 && hideTill2) || (t === 3 && hideTill3)) return; const cardTotal = totals[`t${t}`].card; const zInput = document.getElementById(`t${t}-zreceipt`); const zValue = parseFloat(zInput?.value) || 0; const pdqInputs = document.querySelectorAll(`.till${t}-pdq`); pdqInputs.forEach(pi => { if (!pi.classList.contains('input-error')) pi.classList.remove('input-warning'); }); if (zInput && !zInput.classList.contains('input-error')) zInput.classList.remove('input-warning'); if ((cardTotal > 0.005 && zValue <= 0.005)) { if (zInput && !zInput.classList.contains('input-error')) zInput.classList.add('input-warning'); } else if ((cardTotal <= 0.005 && zValue > 0.005)) { pdqInputs.forEach(pi => { if (!pi.classList.contains('input-error')) pi.classList.add('input-warning'); }); } });
            return totals;
        } catch (error) { console.error("Calculation Error:", error); return null; }
    }
    // === calculateWeeklyTotals Helper ===
    async function calculateWeeklyTotals(sundayDateString) { console.log(`--- Calculating Weekly Totals for print/display: ${sundayDateString} ---`); const sundayDate = new Date(sundayDateString + 'T12:00:00'); const weekDates = []; for (let i = 0; i < 7; i++) { const d = new Date(sundayDate); d.setDate(sundayDate.getDate() - i); weekDates.push(formatDateToYYYYMMDD(d)); } try { await db.open(); const weeklyEntries = await db.dailyEntries.where('date').anyOf(weekDates).toArray(); console.log(`Weekly Calc: Fetched ${weeklyEntries.length} entries.`); const entriesMap = new Map(weeklyEntries.map(e => [e.date, e])); let weeklyZ = 0, weeklyPDQ = 0, weeklyDifference = 0, weeklyBanked = 0; let daysFound = 0; weekDates.reverse(); weekDates.forEach(dateKey => { const entryData = entriesMap.get(dateKey); if (entryData) { const dailyTotals = calculateTotalsFromData(entryData); weeklyZ += dailyTotals.dailyZ; weeklyPDQ += dailyTotals.dailyPDQ; weeklyDifference += dailyTotals.dailyDifference; weeklyBanked += dailyTotals.dailyBanked; daysFound++; } }); console.log(`Weekly Calc: Totals calculated from ${daysFound} days.`); return { z: weeklyZ, diff: weeklyDifference, pdq: weeklyPDQ, banked: weeklyBanked, daysFound: daysFound }; } catch (error) { console.error("Error calculating weekly totals:", error); displayStatusMessage("Error calculating weekly totals.", "error"); return null; } }
    // === MODIFIED calculateAndDisplayWeeklySummary === (Now ONLY updates UI to combined view)
    async function calculateAndDisplayWeeklySummary(sundayDateString) {
        console.log(`%c--- Debounced: calculateAndDisplayWeeklySummary executing for ${sundayDateString} ---`, 'color: blue; font-weight: bold;'); // DEBUG LOG
        const weeklyData = await calculateWeeklyTotals(sundayDateString);
        const sundayDailyTotals = calculateDailyTotals(getFormDataFromDOM()); // Get current Sunday figures
        const sundaySummary = sundayDailyTotals?.summary;

        console.log("DEBUG: Weekly Data for combined view:", weeklyData); // DEBUG LOG
        console.log("DEBUG: Sunday Data for combined view:", sundaySummary); // DEBUG LOG

        if (weeklyData && sundaySummary && summaryTitle) {
             const sundayDate = new Date(sundayDateString + 'T12:00:00');
             const mondayDate = new Date(sundayDate); mondayDate.setDate(sundayDate.getDate() - 6);
             const mondayFmt = mondayDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' });
             const sundayFmt = sundayDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' });

            // Update Title and Labels for Combined View
            summaryTitle.textContent = `Weekly Summary (${mondayFmt} - ${sundayFmt})`;
            labelTotalZ.textContent = "Total Z (Sun / Wk):"; labelTotalDiff.textContent = "Difference (Sun / Wk):"; labelPdqTotal.textContent = "PDQ Total (Sun / Wk):"; labelTotalBanked.textContent = "Total Banked (Sun / Wk):"; // Update Labels

            // Update Spans to show combined data
            totalZSpan.textContent = `Sun: ${formatCurrency(sundaySummary.z)} / Wk: ${formatCurrency(weeklyData.z)}`;
            pdqTotalSpan.textContent = `Sun: ${formatCurrency(sundaySummary.pdq)} / Wk: ${formatCurrency(weeklyData.pdq)}`;
            totalBankedSpan.textContent = `Sun: ${formatCurrency(sundaySummary.banked)} / Wk: ${formatCurrency(weeklyData.banked)}`;
            totalDifferenceSpan.textContent = `Sun: ${formatCurrency(sundaySummary.diff)} / Wk: ${formatCurrency(weeklyData.diff)}`;
            updateSummaryDifferenceSpan(totalDifferenceSpan, sundaySummary.diff); // Style based on Sunday diff

            console.log("%cDEBUG: Debounced Weekly Summary: DOM updated.", 'color: blue'); // DEBUG LOG
        } else { console.error("DEBUG: Failed to get Sunday or Weekly data for combined display during debounced update."); calculateAndDisplayDailySummary(); } // Reset on error
    }
    // === Create Debounced version using the helper ===
    const debouncedCalculateAndDisplayWeeklySummary = debounce(calculateAndDisplayWeeklySummary, WEEKLY_UPDATE_DEBOUNCE_MS);


    // --- Date Handling ---
    function updateFullDateDisplay(dateString) { if (!fullDateDisplay || !dateString) return; try { const date = new Date(dateString + 'T12:00:00'); const weekday = date.toLocaleDateString('en-GB', { weekday: 'long' }); const day = date.getDate(); const dayWithSuffix = getDayWithSuffix(day); const month = date.toLocaleDateString('en-GB', { month: 'long' }); const year = date.getFullYear(); fullDateDisplay.textContent = `${weekday} ${dayWithSuffix} ${month} ${year}`; fullDateDisplay.title = `DB key: ${dateString}`; } catch (e) { console.error("Error formatting date:", e); fullDateDisplay.textContent = dateString; fullDateDisplay.title = `Error formatting`; } }
    function getTodayDateString() { const today = new Date(); return formatDateToYYYYMMDD(today); }
    // === MODIFIED handleDateChange === (Schedules initial weekly calculation/overlay on Sundays)
    async function handleDateChange() {
        console.log("--- handleDateChange START ---");
        const selectedDate = dateInput.value;
        if (!selectedDate || !/^\d{4}-\d{2}-\d{2}$/.test(selectedDate)) { console.error("Invalid date:", selectedDate); displayStatusMessage("Error: Invalid date.", "error"); return; }
        console.log(`Processing date ${selectedDate}`);
        updateFullDateDisplay(selectedDate);
        showBusyIndicator('Loading...');
        try {
            await loadDataForDate(selectedDate); // Load data & display standard daily summary + footers first
            const dayOfWeek = new Date(selectedDate + 'T00:00:00Z').getUTCDay();
            if (dayOfWeek === 0) { // Sunday
                 // Schedule the initial weekly calculation & combined UI update
                 console.log("DEBUG: Sunday detected on load, scheduling initial weekly summary view."); // DEBUG LOG
                 setTimeout(async () => { await calculateAndDisplayWeeklySummary(selectedDate); }, 50);
            }
        } catch(error) { console.error("Error during date change:", error); displayStatusMessage("Error loading date.", "error"); } finally { hideBusyIndicator(); console.log("--- handleDateChange END ---"); }
    }

    // --- CSV Export/Import --- (Simplified PDQ)
    function exportDataToCSV() { console.warn("CSV Export simplified - only SUM of PDQs exported as tX-card."); const dateKey = dateInput.value; if (!dateKey) { displayStatusMessage("Select date first.", "error"); return; } showBusyIndicator('Exporting CSV...'); try { const currentData = { date: dateKey }; document.querySelectorAll('.data-input:not(.pdq-input)').forEach(i => { if (i.id && i.id !== 'current-date') { if (i.type === 'number' && i.value === '') currentData[i.id] = '0.00'; else currentData[i.id] = i.value; } }); for (let t = 1; t <= 3; t++) { const pdqInputs = document.querySelectorAll(`.till${t}-pdq`); let pdqTotal = 0; pdqInputs.forEach(input => pdqTotal += parseFloat(input.value) || 0); currentData[`t${t}-card`] = pdqTotal.toFixed(2); } const headers = ['date','t1-50','t1-20','t1-10','t1-5','t1-2','t1-1','t1-0p50','t1-0p20','t1-0p10','t1-0p05','t2-50','t2-20','t2-10','t2-5','t2-2','t2-1','t2-0p50','t2-0p20','t2-0p10','t2-0p05','t3-50','t3-20','t3-10','t3-5','t3-2','t3-1','t3-0p50','t3-0p20','t3-0p10','t3-0p05','t1-card','t1-invoices','t1-zreceipt','t2-card','t2-invoices','t2-zreceipt','t3-card','t3-invoices','t3-zreceipt','signed-by','day-notes']; let csvContent = "data:text/csv;charset=utf-8,"; csvContent += headers.join(",") + "\r\n"; const row = headers.map(header => { const value = currentData[header] !== undefined ? String(currentData[header]) : ''; if (value.includes(',') || value.includes('"') || value.includes('\n') || value.includes('\r')) return `"${value.replace(/"/g, '""')}"`; return value; }); csvContent += row.join(",") + "\r\n"; const encodedUri = encodeURI(csvContent); const link = document.createElement("a"); link.setAttribute("href", encodedUri); const filename = `GalleonBar_${dateKey}_Simple.csv`; link.setAttribute("download", filename); document.body.appendChild(link); link.click(); document.body.removeChild(link); displayStatusMessage(`Exported ${filename} (Simplified PDQ)`, 'success'); } catch (error) { console.error("Error exporting CSV:", error); displayStatusMessage("Error exporting CSV.", "error"); } finally { hideBusyIndicator(); } }
    function handleImportCsvButtonClick() { csvFileInput?.click(); }
    function handleCsvFileSelect(event) { const file=event.target.files[0]; if(!file)return; showBusyIndicator('Reading CSV...'); const reader=new FileReader(); reader.onload=async (e)=>{ try { await parseAndApplyCSVData(e.target.result); } catch(err){ console.error("CSV parse/apply error:", err); displayStatusMessage(`Error parsing CSV: ${err.message}`, "error", 5000); } finally { hideBusyIndicator(); }}; reader.onerror=e=>{console.error(e);displayStatusMessage("Error reading file.", "error"); hideBusyIndicator();}; reader.readAsText(file); event.target.value=null; }
    async function parseAndApplyCSVData(csvString) { console.log("--- parseAndApplyCSVData ---"); if (!csvString || typeof csvString !== 'string') throw new Error("No CSV data."); const lines = csvString.trim().split(/\r?\n/); if (lines.length < 2) throw new Error("CSV needs header & data row."); const headers = lines[0].split(',').map(h => h.trim()); const values = lines[1].split(',').map(v => v.trim().replace(/^"(.*)"$/, '$1').replace(/""/g, '"')); if (headers.length !== values.length) throw new Error(`Header/value count mismatch.`); const dataMap = {}; headers.forEach((header, index) => { dataMap[header] = values[index]; }); const dateKey = dataMap['date']; if (!dateKey || !/^\d{4}-\d{2}-\d{2}$/.test(dateKey)) throw new Error("CSV needs valid 'date' column."); console.log(`Applying CSV data for: ${dateKey}`); const currentDate = dateInput.value; if (dateKey !== currentDate) { if (!confirm(`CSV is for ${dateKey}, view is ${currentDate}. Load ${dateKey}?`)) { displayStatusMessage("CSV import cancelled.", "info"); return; } dateInput.value = dateKey; } clearForm(false); let appliedCount = 0; Object.keys(dataMap).forEach(key => { if (key === 'date') return; const inputElement = document.getElementById(key); if (inputElement && !key.match(/^t[1-3]-card$/)) { inputElement.value = dataMap[key]; appliedCount++; } else if (key.match(/^t([1-3])-card$/)) { const tillNum = key.match(/^t([1-3])-card$/)[1]; const firstPdqInput = document.querySelector(`.till${tillNum}-pdq`); if (firstPdqInput) { firstPdqInput.value = parseFloat(dataMap[key])?.toFixed(2) || '0.00'; appliedCount++; } else console.warn(`PDQ input missing for ${key}`); } else console.warn(`Unhandled CSV key: ${key}`); }); console.log(`Applied ${appliedCount} CSV values.`); calculateAndDisplayDailySummary(); updateNotesIndicator(notesTextArea?.value); displayStatusMessage(`Imported data for ${dateKey} from CSV.`, "success"); if (devModalStatus) devModalStatus.textContent = `Imported CSV: ${dateKey}.`; if (dateKey !== currentDate) updateFullDateDisplay(dateKey); }

    // --- Full JSON Backup & Restore ---
    async function exportAllDataToJson() { console.log("--- exportAllDataToJson ---"); showBusyIndicator('Exporting all...'); try { await db.open(); const allEntries = await db.dailyEntries.toArray(); const allNames = await db.userNames.toArray(); const backupData = { version: 3, exportDate: new Date().toISOString(), dailyEntries: allEntries, userNames: allNames.map(user => ({ name: user.name })) }; const jsonString = JSON.stringify(backupData, null, 2); const blob = new Blob([jsonString], { type: "application/json;charset=utf-8" }); const link = document.createElement("a"); const url = URL.createObjectURL(blob); link.setAttribute("href", url); const timestamp = new Date().toISOString().replace(/[:.]/g, '-'); const filename = `GalleonBar_Backup_v3_${timestamp}.json`; link.setAttribute("download", filename); document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url); localStorage.setItem('galleonLastBackupTimestamp', Date.now().toString()); checkBackupReminder(); console.log('Updated last backup timestamp.'); if (devModalStatus) devModalStatus.textContent = `Exported: ${filename}`; displayStatusMessage('Export successful!', 'success'); } catch (error) { console.error("Export error:", error); if (devModalStatus) devModalStatus.textContent = 'Export Error.'; displayStatusMessage('Error exporting data.', 'error'); } finally { hideBusyIndicator(); } }
    async function importAllDataFromJson(file) { console.log("--- importAllDataFromJson ---"); if (!file) { displayStatusMessage("No file selected.", "error"); return; } showBusyIndicator(`Reading: ${file.name}...`); const reader = new FileReader(); reader.onload = async (e) => { let success = false; try { const jsonString = e.target.result; const backupData = JSON.parse(jsonString); console.log("Validating JSON structure..."); if (!backupData || typeof backupData !== 'object' || !Array.isArray(backupData.dailyEntries) || !Array.isArray(backupData.userNames)) throw new Error("Invalid JSON backup file structure."); if (backupData.dailyEntries.length > 0) { const sample = backupData.dailyEntries[0]; if (!sample.date || (!sample.hasOwnProperty('t1-pdq-values') && !sample.hasOwnProperty('t1-card'))) console.warn("Imported data might be missing fields."); } const entryCount = backupData.dailyEntries.length; const nameCount = backupData.userNames.length; console.log(`Found ${entryCount} entries, ${nameCount} names.`); if (!confirm(`Import ${entryCount} entries & ${nameCount} names from ${file.name}?\n\nWARNING: Overwrites matching dates & REPLACES entire 'Signed By' list.`)) { displayStatusMessage('Import cancelled.', 'info'); devModalStatus.textContent='Import cancelled.'; return; } devModalStatus.textContent = 'Importing...'; await db.open(); const entriesToPut = backupData.dailyEntries.map(entry => { for (let i = 1; i <= 3; i++) { const oldKey = `t${i}-card`; const newKey = `t${i}-pdq-values`; if (entry.hasOwnProperty(oldKey) && !entry.hasOwnProperty(newKey)) { const v = parseFloat(entry[oldKey]) || 0; entry[newKey] = v > 0 ? [v.toFixed(2)] : []; delete entry[oldKey]; } else if (!entry.hasOwnProperty(newKey)) entry[newKey] = []; } DENOM_IDS.forEach(id => { for (let t = 1; t <= 3; t++) if (!entry.hasOwnProperty(`t${t}-${id}`)) entry[`t${t}-${id}`] = '0.00'; }); for (let t = 1; t <= 3; t++) { if (!entry.hasOwnProperty(`t${t}-invoices`)) entry[`t${t}-invoices`] = '0.00'; if (!entry.hasOwnProperty(`t${t}-zreceipt`)) entry[`t${t}-zreceipt`] = '0.00'; } if (!entry.hasOwnProperty('signed-by')) entry['signed-by'] = ''; if (!entry.hasOwnProperty('day-notes')) entry['day-notes'] = ''; return entry; }); if (entryCount > 0) { console.log(`Importing ${entriesToPut.length} entries...`); await db.dailyEntries.bulkPut(entriesToPut); } console.log(`Clearing ${await db.userNames.count()} old names...`); await db.userNames.clear(); if (nameCount > 0) { const uniqueNames = [...new Set(backupData.userNames.map(u => u.name?.trim()).filter(Boolean))]; const namesToAdd = uniqueNames.map(name => ({ name })); console.log(`Importing ${namesToAdd.length} unique names...`); if (namesToAdd.length > 0) await db.userNames.bulkAdd(namesToAdd); } console.log("Import finished."); devModalStatus.textContent = `Import successful: ${entryCount} entries, ${nameCount} names.`; displayStatusMessage('Import successful!', 'success'); success = true; await populateSignedByList(); await handleDateChange(); } catch (error) { console.error("JSON import error:", error); devModalStatus.textContent = `Import Error: ${error.message}`; displayStatusMessage(`Import Error: ${error.message}`, 'error', 5000); } finally { if (!success) console.log("Hiding indicator after import attempt."); hideBusyIndicator(); } }; reader.onerror = (e) => { console.error("File read error:", e); devModalStatus.textContent = 'Error reading file.'; displayStatusMessage('Error reading file.', 'error'); hideBusyIndicator(); }; reader.readAsText(file); }

    // --- Enhanced Signed By Field ---
    async function populateSignedByList() { console.log("--- Populating Signed By ---"); if (!namesList) return; try { await db.open(); const userNames = await db.userNames.orderBy('name').toArray(); namesList.innerHTML = ''; userNames.forEach(user => { const option = document.createElement('option'); option.value = user.name; namesList.appendChild(option); }); console.log(`Populated datalist: ${userNames.length} names.`); } catch (error) { console.error("Error populating signed list:", error); displayStatusMessage("Error loading names.", "error"); } }
    async function saveSignedByName(event) { const name = event.target.value.trim(); if (name) { console.log("Saving name:", name); try { await db.open(); const exists = await db.userNames.where('name').equalsIgnoreCase(name).first(); if (!exists) { await db.userNames.add({ name: name }); console.log("Saved new name:", name); await populateSignedByList(); } } catch(e) { console.error("Error saving name:", e); displayStatusMessage("Error saving name.", "error");} } }

    // --- Navigation & Saving ---
    async function goToPreviousDay() { console.log(">>> Prev Day"); showBusyIndicator('Changing date...'); try { const saved = await saveDataForCurrentDate(true); if (!saved) { console.warn("Save failed, aborting nav."); hideBusyIndicator(); return; } const d = new Date(dateInput.value + 'T12:00:00'); d.setDate(d.getDate() - 1); dateInput.value = formatDateToYYYYMMDD(d); await handleDateChange(); } catch (e) { console.error("Prev Day error:", e); displayStatusMessage("Error changing date.", "error"); hideBusyIndicator(); } finally { console.log("<<< Prev Day end."); } }
    async function goToNextDay() { console.log(">>> Next Day"); showBusyIndicator('Changing date...'); try { const saved = await saveDataForCurrentDate(true); if (!saved) { console.warn("Save failed, aborting nav."); hideBusyIndicator(); return; } const d = new Date(dateInput.value + 'T12:00:00'); d.setDate(d.getDate() + 1); dateInput.value = formatDateToYYYYMMDD(d); await handleDateChange(); } catch (e) { console.error("Next Day error:", e); displayStatusMessage("Error changing date.", "error"); hideBusyIndicator(); } finally { console.log("<<< Next Day end."); } }
    async function saveDataForCurrentDate(skipAlert = false) { console.log("--- saveDataForCurrentDate ---"); checkFormValidity(); if (!isFormValid) { displayStatusMessage("Cannot save: Fix errors.", 'error'); return false; } const dateKey = dateInput.value; if (!dateKey) { displayStatusMessage("Select date first.", "error"); return false; } if (!skipAlert) showBusyIndicator('Saving...'); const data = { date: dateKey }; document.querySelectorAll('.data-input').forEach(i => { if (i.id && i.id !== 'current-date' && !i.classList.contains('pdq-input')) data[i.id] = i.value; }); for (let t = 1; t <= 3; t++) { const pdqInputs = document.querySelectorAll(`.till${t}-pdq`); data[`t${t}-pdq-values`] = Array.from(pdqInputs).map(input => input.value || '0.00'); } const originalButtonText = saveButton.textContent; if (!skipAlert) { saveButton.disabled = true; saveButton.textContent = 'Saving...'; } try { await db.open(); await db.dailyEntries.put(data); console.log(`Saved/Updated: ${dateKey}`); if (!skipAlert) displayStatusMessage(`Saved: ${dateKey}`, 'success'); return true; } catch (error) { console.error("Save error:", error); if (!skipAlert) displayStatusMessage("Error saving data.", 'error'); return false; } finally { if (!skipAlert) { saveButton.disabled = false; saveButton.textContent = originalButtonText; hideBusyIndicator(); } console.log("--- saveData finished ---"); } }

    // --- Data Loading / Clearing ---
    async function loadDataForDate(dateKey) { console.log(`--- loadData: ${dateKey} ---`); if (!dateKey) { clearForm(false); return; } console.log(`Clearing form for ${dateKey}`); clearForm(false); console.log(`Dexie Loading: ${dateKey}`); try { await db.open(); const data = await db.dailyEntries.get(dateKey); console.log(`Workspaceed ${dateKey}:`, data ? 'Data found' : 'No data'); if (data) { console.log("Populating inputs..."); document.querySelectorAll('.data-input:not(.pdq-input)').forEach(i => { if (i.id && data.hasOwnProperty(i.id)) i.value = data[i.id]; }); for (let t = 1; t <= 3; t++) { const pdqValues = data[`t${t}-pdq-values`]; const pdqContainer = document.getElementById(`t${t}-pdq-container`); const firstPdqInput = pdqContainer?.querySelector('.pdq-input-group input'); if (pdqContainer && firstPdqInput && Array.isArray(pdqValues) && pdqValues.length > 0) { firstPdqInput.value = pdqValues[0] || '0.00'; for (let i = 1; i < pdqValues.length; i++) addPdqInput(t, pdqValues[i]); } else if (data.hasOwnProperty(`t${t}-card`) && firstPdqInput) { firstPdqInput.value = parseFloat(data[`t${t}-card`])?.toFixed(2) || '0.00'; } else if (firstPdqInput) { firstPdqInput.value = '0.00'; } } updateNotesIndicator(data['day-notes']); console.log(`Finished populating for ${dateKey}.`); } else { console.log(`No data for ${dateKey}.`); updateNotesIndicator(''); } } catch (e) { console.error("Load error:", e); displayStatusMessage(`Error loading ${dateKey}.`, 'error'); } finally { console.log("loadData finally..."); checkFormValidity(); console.log("Calling daily summary & footers display from loadData finally."); calculateAndDisplayDailySummary(); console.log(`--- loadData finished: ${dateKey} ---`); } }
    function resetInput(input) { if (!input) return; const isDatePicker = input.type === 'date'; if (isDatePicker || !input.id) return; if (input.type === 'number' || input.type === 'text' || input.tagName.toUpperCase() === 'TEXTAREA') input.value = (input.type === 'number' && input.step === '0.01' && !input.readOnly) ? '0.00' : ''; input.classList.remove('input-error', 'input-warning'); }
    function clearForm(showAlert = true) { const dateStr = dateInput?.value || "current"; console.log(`--- clearForm (alert: ${showAlert}) for ${dateStr} ---`); if (showAlert && !confirm(`Clear entries for ${dateStr}? (Doesn't delete saved data)`)) return; document.querySelectorAll('.data-input:not(.pdq-input)').forEach(i => resetInput(i)); for (let t = 1; t <= 3; t++) { const pdqContainer = document.getElementById(`t${t}-pdq-container`); if(pdqContainer) { pdqContainer.querySelectorAll('.pdq-input-group:not(:first-child)').forEach(g => g.remove()); const firstInput = pdqContainer.querySelector('.pdq-input-group input'); if(firstInput) { firstInput.value = '0.00'; firstInput.classList.remove('input-error', 'input-warning'); } } } console.log("Form cleared."); if (showAlert) displayStatusMessage("Form cleared.", 'success'); checkFormValidity(); updateNotesIndicator(''); buildCombinedSequence(); calculateAndDisplayDailySummary(); console.log("--- clearForm finished ---"); }

    // --- Multi-PDQ Input Handling ---
    function addPdqInput(tillNum, value = '0.00') { const container = document.getElementById(`t${tillNum}-pdq-container`); if (!container) return; const templateGroup = container.querySelector('.pdq-input-group'); if (!templateGroup) return; const newGroup = templateGroup.cloneNode(true); const newInput = newGroup.querySelector('input'); const removeBtn = newGroup.querySelector('.remove-pdq-btn'); newInput.value = parseFloat(value)?.toFixed(2) || '0.00'; newInput.classList.remove('input-error', 'input-warning'); newInput.addEventListener('input', validateNumericInput); newInput.addEventListener('blur', validateNumericInput); newInput.addEventListener('focus', (e) => { if (e.target.type === 'number' && (e.target.value === '0.00' || e.target.value === '0')) e.target.value = ''; }); newInput.addEventListener('input', calculateAndDisplayDailySummary); newInput.addEventListener('keydown', handleEnterKey); removeBtn.style.display = 'inline-block'; removeBtn.disabled = false; container.appendChild(newGroup); buildCombinedSequence(); }
    function handleAddPdqInput(event) { const tillNum = event.target.dataset.till; addPdqInput(tillNum); calculateAndDisplayDailySummary(); }
    function handleRemovePdqInput(event) { event.target.closest('.pdq-input-group')?.remove(); calculateAndDisplayDailySummary(); buildCombinedSequence(); }

    // --- Enter Key Navigation ---
    function buildCombinedSequence() { till1SequenceElements = till1SequenceIds.map(id => document.getElementById(id)).filter(el => el !== null); till2SequenceElements = till2SequenceIds.map(id => document.getElementById(id)).filter(el => el !== null); till3SequenceElements = till3SequenceIds.map(id => document.getElementById(id)).filter(el => el !== null); const getVisiblePdqInputs = (t) => { if ((t === 2 && hideTill2) || (t === 3 && hideTill3)) return []; const c = document.getElementById(`t${t}-pdq-container`); if (!c || c.offsetParent === null) return []; return Array.from(c.querySelectorAll(`.till${t}-pdq`)); }; combinedNavSequence = [ ...till1SequenceElements.slice(0, 10), ...getVisiblePdqInputs(1), ...till1SequenceElements.slice(10), ...(hideTill2 ? [] : [ ...till2SequenceElements.slice(0, 10), ...getVisiblePdqInputs(2), ...till2SequenceElements.slice(10) ]), ...(hideTill3 ? [] : [ ...till3SequenceElements.slice(0, 10), ...getVisiblePdqInputs(3), ...till3SequenceElements.slice(10) ]), signedByElement, dayNotesElement, saveButton ].filter(el => el !== null && !(el.offsetParent === null && ![saveButton, signedByElement, dayNotesElement].includes(el))); console.log("Built nav sequence length:", combinedNavSequence.length); }
    function handleEnterKey(event) { if (event.key === 'Enter' && !event.shiftKey && event.target.tagName === 'TEXTAREA') return; if (event.key === 'Enter') { event.preventDefault(); const currentInput = event.target; let nextInput = null; const moveForward = !event.shiftKey; console.log(`--- handleEnterKey: ${currentInput.id || currentInput.classList} (Shift: ${!moveForward}) ---`); const currentIndex = combinedNavSequence.indexOf(currentInput); console.log(`Current index: ${currentIndex}`); if (currentIndex > -1) { if (moveForward) { if (currentIndex < combinedNavSequence.length - 1) nextInput = combinedNavSequence[currentIndex + 1]; else nextInput = saveButton; } else { if (currentIndex > 0) nextInput = combinedNavSequence[currentIndex - 1]; } } else { console.warn(`Element not in sequence. Rebuilding...`); buildCombinedSequence(); const newIndex = combinedNavSequence.indexOf(currentInput); if (newIndex > -1) { handleEnterKey(event); return; } else nextInput = moveForward ? saveButton : combinedNavSequence[0]; } if (nextInput) { console.log(`Target: ${nextInput.id || nextInput.tagName}`); nextInput.focus(); if (typeof nextInput.select === 'function') nextInput.select(); } else { console.log("No next/prev, blurring."); currentInput.blur(); } } }

    // --- Arrow Key Date Navigation ---
    function handleArrowKeyDateChange(event) { const activeElement = document.activeElement; const isInputFocused = activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA'); if (!isInputFocused && (event.key === 'ArrowLeft' || event.key === 'ArrowRight')) { if (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey) { return; } event.preventDefault(); if (event.key === 'ArrowLeft') { console.log("ArrowLeft nav"); goToPreviousDay(); } else if (event.key === 'ArrowRight') { console.log("ArrowRight nav"); goToNextDay(); } } }

    // --- Modal Dev Tools Functions ---
    async function clearUserNames() { console.log("--- clearUserNames ---"); if (!confirm("Clear 'Signed By' list?")) return; showBusyIndicator('Clearing names...'); try { await db.open(); await db.userNames.clear(); await populateSignedByList(); displayStatusMessage('Names cleared.', 'success'); devModalStatus.textContent = 'Names cleared.'; } catch (e) { console.error(e); displayStatusMessage('Error clearing names.', 'error'); devModalStatus.textContent = 'Error.';} finally { hideBusyIndicator(); } }
    async function clearAllEntries() { console.log("--- clearAllEntries ---"); if (!confirm("DELETE ALL daily entries?")) return; showBusyIndicator('Clearing entries...'); try { await db.open(); await db.dailyEntries.clear(); displayStatusMessage('Entries cleared.', 'success'); devModalStatus.textContent = 'Entries cleared.'; clearForm(false); } catch (e) { console.error(e); displayStatusMessage('Error clearing entries.', 'error'); devModalStatus.textContent = 'Error.';} finally { hideBusyIndicator(); } }
    async function nukeDatabase() { console.log("--- nukeDatabase ---"); const pwd = prompt(`DANGER! Delete ALL data? Type: ${NUKE_PASSWORD}`); if (pwd !== NUKE_PASSWORD) { displayStatusMessage('Nuke cancelled.', 'info'); devModalStatus.textContent='Nuke cancelled.'; return; } showBusyIndicator('Nuking...'); try { await db.delete(); localStorage.removeItem('galleonLastBackupTimestamp'); displayStatusMessage('DATABASE DELETED. Reload.', 'error', 0); devModalStatus.textContent = 'DELETED. Reload.'; document.querySelectorAll('button').forEach(b => b.disabled = true); } catch (e) { console.error(e); displayStatusMessage('Error deleting DB.', 'error'); devModalStatus.textContent = 'Error.'; hideBusyIndicator();} }
    async function generateTestData() { console.log("--- generateTestData ---"); if (!confirm("Generate 10 days test data?")) { devModalStatus.textContent='Gen cancelled.'; return;} showBusyIndicator('Generating...'); devModalStatus.textContent='Generating...'; try { await db.open(); const names=(await db.userNames.toArray()).map(u=>u.name); if(names.length===0)names.push("Tester"); const today=new Date(); const data=[]; for(let i=0;i<10;i++){ const date=new Date(today); date.setDate(today.getDate()-i); const dateKey=formatDateToYYYYMMDD(date); const entry={date:dateKey}; let t1=0,t2=0,t3=0; DENOM_IDS.forEach(id=>{entry[`t1-${id}`]=(Math.random()<.6)?(Math.random()*50).toFixed(2):'0.00';entry[`t2-${id}`]=(Math.random()<.4)?(Math.random()*40).toFixed(2):'0.00';entry[`t3-${id}`]=(Math.random()<.3)?(Math.random()*30).toFixed(2):'0.00'; t1+=parseFloat(entry[`t1-${id}`]);t2+=parseFloat(entry[`t2-${id}`]);t3+=parseFloat(entry[`t3-${id}`]);}); entry['t1-pdq-values']=[(Math.random()*300).toFixed(2)]; if(Math.random()>.7)entry['t1-pdq-values'].push((Math.random()*50).toFixed(2)); entry['t2-pdq-values']=[(Math.random()*200).toFixed(2)]; if(Math.random()>.8)entry['t2-pdq-values'].push((Math.random()*40).toFixed(2)); entry['t3-pdq-values']=[(Math.random()*150).toFixed(2)]; const c1=entry['t1-pdq-values'].reduce((s,v)=>s+parseFloat(v),0);const c2=entry['t2-pdq-values'].reduce((s,v)=>s+parseFloat(v),0);const c3=entry['t3-pdq-values'].reduce((s,v)=>s+parseFloat(v),0); entry['t1-invoices']=(Math.random()<.1)?(Math.random()*20).toFixed(2):'0.00'; entry['t2-invoices']='0.00';entry['t3-invoices']='0.00'; const d1=(Math.random()-.5)*5, d2=(Math.random()-.5)*3, d3=(Math.random()-.5)*2; entry['t1-zreceipt']=Math.max(0,t1-currentFloat+c1+parseFloat(entry['t1-invoices'])+d1).toFixed(2); entry['t2-zreceipt']=Math.max(0,t2-currentFloat+c2+parseFloat(entry['t2-invoices'])+d2).toFixed(2); entry['t3-zreceipt']=Math.max(0,t3-currentFloat+c3+parseFloat(entry['t3-invoices'])+d3).toFixed(2); entry['signed-by']=names[Math.floor(Math.random()*names.length)];entry['day-notes']=(Math.random()<.2)?`Test note for ${dateKey}`:'';data.push(entry);} await db.dailyEntries.bulkPut(data); devModalStatus.textContent='Generated 10 days data.'; displayStatusMessage('Generated test data.', 'success'); await handleDateChange();} catch (e) { console.error(e); displayStatusMessage('Error generating data.', 'error'); devModalStatus.textContent='Error.';} finally { hideBusyIndicator(); } }
    async function deleteSingleName() { console.log("--- deleteSingleName ---"); const input = document.getElementById('dev-name-to-delete'); const name = input?.value.trim(); if (!name) { devModalStatus.textContent = 'Enter name.'; return; } showBusyIndicator('Deleting...'); try { await db.open(); const user = await db.userNames.where('name').equalsIgnoreCase(name).first(); if (!user) { displayStatusMessage(`"${name}" not found.`, 'error'); devModalStatus.textContent = 'Not found.'; return; } if (confirm(`Delete "${user.name}"?`)) { await db.userNames.delete(user.id); await populateSignedByList(); displayStatusMessage(`Deleted: ${user.name}`, 'success'); devModalStatus.textContent = 'Deleted.'; input.value = ''; } else { devModalStatus.textContent = 'Delete cancelled.'; } } catch (e) { console.error(e); displayStatusMessage('Error deleting name.', 'error'); devModalStatus.textContent = 'Error.'; } finally { hideBusyIndicator(); } }

    // --- Event Listeners Setup ---
    document.getElementById('reconciliation-table')?.addEventListener('input', (event) => { if (event.target.type === 'number') { validateNumericInput(event); calculateAndDisplayDailySummary(); } });
    document.getElementById('reconciliation-table')?.addEventListener('blur', (event) => { if (event.target.type === 'number') validateNumericInput(event); }, true);
    document.getElementById('reconciliation-table')?.addEventListener('focus', (event) => { if (event.target.type === 'number' && (event.target.value === '0.00' || event.target.value === '0')) { if (!event.target.readOnly && !event.target.disabled) event.target.value = ''; } }, true);
    document.getElementById('reconciliation-table')?.addEventListener('click', (event) => { if (event.target.classList.contains('remove-pdq-btn')) handleRemovePdqInput(event); else if (event.target.classList.contains('add-pdq-btn')) handleAddPdqInput(event); });
    document.getElementById('reconciliation-table')?.addEventListener('keydown', handleEnterKey);

    dateInput?.addEventListener('change', () => handleDateChange());
    document.getElementById('prev-day')?.addEventListener('click', () => goToPreviousDay());
    document.getElementById('next-day')?.addEventListener('click', () => goToNextDay());
    saveButton?.addEventListener('click', async () => { console.log("--- saveDataForCurrentDate (Button Click) ---"); console.log("Updating display before save validation..."); calculateAndDisplayDailySummary(); checkFormValidity(); if (!isFormValid) { displayStatusMessage("Cannot save: Please fix errors in form.", 'error'); return; } await saveDataForCurrentDate(false); });
    document.getElementById('clear-form')?.addEventListener('click', () => clearForm(true));
    printButton?.addEventListener('click', async () => { console.log("Print clicked..."); checkFormValidity(); if (!isFormValid) { displayStatusMessage("Cannot print: Fix errors.", 'error'); return; } const signedByValue = signedByInput?.value.trim(); if (!signedByValue) { displayStatusMessage("Enter name in 'Signed' field.", 'error'); signedByInput?.classList.add('input-error', 'flash-error'); setTimeout(() => signedByInput?.classList.remove('flash-error'), 750); signedByInput?.focus(); return; } else { signedByInput?.classList.remove('input-error'); } console.log("Saving before print..."); const savedOk = await saveDataForCurrentDate(true); if (savedOk) { showBusyIndicator('Preparing print...'); console.log("Preparing print version..."); let printHtml = ''; try { const currentFormData = getFormDataFromDOM(); const currentDailyTotals = calculateDailyTotals(currentFormData); const currentNotes = notesTextArea.value; const currentDateStr = dateInput.value; const currentDate = new Date(currentDateStr + 'T12:00:00'); const isSunday = currentDate.getUTCDay() === 0; let weeklyTotals = null; let mondayFmt = ''; let sundayFmt = ''; if (isSunday) { weeklyTotals = await calculateWeeklyTotals(currentDateStr); const sundayDate = currentDate; const mondayDate = new Date(sundayDate); mondayDate.setDate(sundayDate.getDate() - 6); mondayFmt = mondayDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' }); sundayFmt = sundayDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' }); } printHtml = `<div id="print-content">`; printHtml += `<h1>${document.querySelector('h1').textContent}</h1>`; printHtml += `<p class="print-date">${fullDateDisplay.textContent}</p>`; printHtml += `<table class="print-table">`; printHtml += `<thead><tr><th>Denomination</th><th>Till 1 (£)</th>`; if (!hideTill2) printHtml += `<th>Till 2 (£)</th>`; if (!hideTill3) printHtml += `<th>Till 3 (£)</th>`; printHtml += `</tr></thead><tbody>`; DENOM_IDS.forEach(denomId => { let label = denomId.includes('p') ? denomId.replace('p', '.') + 'p' : `£${denomId}`; printHtml += `<tr><td>${label}</td>`; printHtml += `<td>${formatCurrency(currentFormData[`t1-${denomId}`])}</td>`; if (!hideTill2) printHtml += `<td>${formatCurrency(currentFormData[`t2-${denomId}`])}</td>`; if (!hideTill3) printHtml += `<td>${formatCurrency(currentFormData[`t3-${denomId}`])}</td>`; printHtml += `</tr>`; }); printHtml += `</tbody><tfoot>`; printHtml += `<tr><td>Total Cash</td><td>${formatCurrency(currentDailyTotals.t1.cash)}</td>${!hideTill2 ? `<td>${formatCurrency(currentDailyTotals.t2.cash)}</td>` : ''}${!hideTill3 ? `<td>${formatCurrency(currentDailyTotals.t3.cash)}</td>` : ''}</tr>`; printHtml += `<tr><td>${floatLabelCell.textContent}</td><td>${(currentDailyTotals.t1.cash > 0) ? formatCurrency(currentDailyTotals.t1.actual) : formatCurrency(0)}</td>${!hideTill2 ? `<td>${(currentDailyTotals.t2.cash > 0) ? formatCurrency(currentDailyTotals.t2.actual) : formatCurrency(0)}</td>` : ''}${!hideTill3 ? `<td>${(currentDailyTotals.t3.cash > 0) ? formatCurrency(currentDailyTotals.t3.actual) : formatCurrency(0)}</td>` : ''}</tr>`; printHtml += `<tr><td>Card Totals</td><td>${formatCurrency(currentDailyTotals.t1.card)}</td>${!hideTill2 ? `<td>${formatCurrency(currentDailyTotals.t2.card)}</td>` : ''}${!hideTill3 ? `<td>${formatCurrency(currentDailyTotals.t3.card)}</td>` : ''}</tr>`; printHtml += `<tr><td>Invoices</td><td>${formatCurrency(currentDailyTotals.t1.invoices)}</td>${!hideTill2 ? `<td>${formatCurrency(currentDailyTotals.t2.invoices)}</td>` : ''}${!hideTill3 ? `<td>${formatCurrency(currentDailyTotals.t3.invoices)}</td>` : ''}</tr>`; printHtml += `<tr><td>Z Receipt</td><td>${formatCurrency(currentDailyTotals.t1.z)}</td>${!hideTill2 ? `<td>${formatCurrency(currentDailyTotals.t2.z)}</td>` : ''}${!hideTill3 ? `<td>${formatCurrency(currentDailyTotals.t3.z)}</td>` : ''}</tr>`; const diff1Span = updateSummaryDifferenceSpan(document.createElement('span'), currentDailyTotals.t1.diff); const diff2Span = updateSummaryDifferenceSpan(document.createElement('span'), !hideTill2 ? currentDailyTotals.t2.diff : 0); const diff3Span = updateSummaryDifferenceSpan(document.createElement('span'), !hideTill3 ? currentDailyTotals.t3.diff : 0); printHtml += `<tr><td>Difference</td><td>${diff1Span.outerHTML}</td>${!hideTill2 ? `<td>${diff2Span.outerHTML}</td>` : ''}${!hideTill3 ? `<td>${diff3Span.outerHTML}</td>` : ''}</tr>`; printHtml += `</tfoot></table>`; printHtml += `<div class="print-summary-section">`; if (isSunday && weeklyTotals && currentDailyTotals?.summary) { const sundaySummary = currentDailyTotals.summary; printHtml += `<h2>Weekly Summary (${mondayFmt} - ${sundayFmt})</h2>`; printHtml += `<p><span class="print-label">Total Z:</span><span class="print-value">Sun: ${formatCurrency(sundaySummary.z)} / Wk: ${formatCurrency(weeklyTotals.z)}</span></p>`; printHtml += `<p><span class="print-label">PDQ Total:</span><span class="print-value">Sun: ${formatCurrency(sundaySummary.pdq)} / Wk: ${formatCurrency(weeklyTotals.pdq)}</span></p>`; printHtml += `<p><span class="print-label">Total Banked:</span><span class="print-value">Sun: ${formatCurrency(sundaySummary.banked)} / Wk: ${formatCurrency(weeklyTotals.banked)}</span></p>`; printHtml += `<p><span class="print-label">Difference:</span><span class="print-value">Sun: ${formatCurrency(sundaySummary.diff)} / Wk: ${formatCurrency(weeklyTotals.diff)}</span></p>`; } else if (currentDailyTotals?.summary) { printHtml += `<h2>Overall Summary</h2>`; printHtml += `<p><span class="print-label">Total Z:</span><span class="print-value">${formatCurrency(currentDailyTotals.summary.z)}</span></p>`; printHtml += `<p><span class="print-label">PDQ Total:</span><span class="print-value">${formatCurrency(currentDailyTotals.summary.pdq)}</span></p>`; printHtml += `<p><span class="print-label">Total Banked:</span><span class="print-value">${formatCurrency(currentDailyTotals.summary.banked)}</span></p>`; const dailyDiffSpan = updateSummaryDifferenceSpan(document.createElement('span'), currentDailyTotals.summary.diff); printHtml += `<p><span class="print-label">Total Difference:</span><span class="print-value">${dailyDiffSpan.outerHTML}</span></p>`; } printHtml += `<p style="margin-top: 20px;"><span class="print-label">Signed:</span><span class="print-value" style="border-bottom: 1px dotted #666; min-width: 150px; text-align: left;">${signedByValue}</span></p>`; if (currentNotes) { printHtml += `<div class="print-notes"><span class="print-label" style="display: block; text-align: left;">Notes:</span><p style="white-space: pre-wrap; text-align: left; margin-top: 0; padding-left: 10px;">${currentNotes}</p></div>`; } printHtml += `</div></div>`; const printContainer = document.createElement('div'); printContainer.id = 'print-container'; printContainer.innerHTML = printHtml; document.body.appendChild(printContainer); document.body.classList.add('printing'); console.log(`Print content generated.`); const cleanupPrint = () => { console.log('Cleaning up after print...'); document.body.classList.remove('printing'); printContainer.remove(); console.log('Cleaned up print elements.'); window.removeEventListener('afterprint', cleanupPrint); handleDateChange(); }; window.addEventListener('afterprint', cleanupPrint); hideBusyIndicator(); window.print(); } catch(printError) { console.error("Error preparing print content:", printError); displayStatusMessage("Error preparing print view.", "error"); hideBusyIndicator(); document.body.classList.remove('printing'); document.getElementById('print-container')?.remove(); } } else { console.error("Save failed before printing."); displayStatusMessage("Could not save before printing.", "error"); } });
    signedByInput?.addEventListener('input', () => { if (signedByInput.value.trim()) signedByInput.classList.remove('input-error', 'input-warning'); });
    signedByInput?.addEventListener('blur', saveSignedByName);
    goToTodayButton?.addEventListener('click', async () => { const todayStr = getTodayDateString(); if (dateInput.value === todayStr) { displayStatusMessage("Already on today.", "info", 1500); return; } console.log("Go To Today"); showBusyIndicator("Loading today..."); try { await saveDataForCurrentDate(true); dateInput.value = todayStr; await handleDateChange(); } catch (error) { console.error("Go To Today error:", error); displayStatusMessage("Error loading today.", "error"); hideBusyIndicator(); } });

    // Modal Toggles
    devModalButton?.addEventListener('click', () => { if (devModal) { devModal.style.display = 'block'; if(devModalStatus) devModalStatus.textContent = ''; } });
    devModalCloseButton?.addEventListener('click', () => { if (devModal) devModal.style.display = 'none'; });
    window.addEventListener('click', (event) => { if (event.target === devModal) devModal.style.display = 'none'; });

    // Theme Toggle
    function applyTheme(theme) { if (theme === 'dark') { document.body.classList.add('dark-mode'); themeToggleButton.textContent = '☀️'; themeToggleButton.title = 'Switch to Light'; localStorage.setItem('themePreference', 'dark'); } else { document.body.classList.remove('dark-mode'); themeToggleButton.textContent = '🌙'; themeToggleButton.title = 'Switch to Dark'; localStorage.setItem('themePreference', 'light'); } }
    if(themeToggleButton) { themeToggleButton.addEventListener('click', () => { document.body.classList.contains('dark-mode') ? applyTheme('light') : applyTheme('dark'); }); }
    const savedTheme = localStorage.getItem('themePreference'); applyTheme(savedTheme || 'light');

    // Arrow Key Date Change
    document.addEventListener('keydown', handleArrowKeyDateChange);

    // Settings Input listeners
    floatSettingInput?.addEventListener('change', (e) => { const v = parseFloat(e.target.value); if (!isNaN(v) && v>=0) { currentFloat=v; saveSetting('floatAmount',v); applySettings(); } else { e.target.value=currentFloat.toFixed(2); displayStatusMessage("Invalid float.", "error"); } });
    thresholdSettingInput?.addEventListener('change', (e) => { const v = parseFloat(e.target.value); if (!isNaN(v) && v>=0) { currentDiscrepancyThreshold=v; saveSetting('discrepancyThreshold',v); applySettings(); } else { e.target.value=currentDiscrepancyThreshold.toFixed(2); displayStatusMessage("Invalid threshold.", "error"); } });
    highTwentySettingInput?.addEventListener('change', (e) => { const v = parseFloat(e.target.value); if (!isNaN(v) && v>=0) { currentHighTwentyThreshold=v; saveSetting('highTwentyThreshold',v); } else { e.target.value=currentHighTwentyThreshold.toFixed(2); displayStatusMessage("Invalid £20 threshold.", "error"); } });
    hideTill2Checkbox?.addEventListener('change', (e) => { hideTill2=e.target.checked; saveSetting('hideTill2',hideTill2); applySettings(); });
    hideTill3Checkbox?.addEventListener('change', (e) => { hideTill3=e.target.checked; saveSetting('hideTill3',hideTill3); applySettings(); });
    resetSettingsButton?.addEventListener('click', resetSettings);

    // Modal Button listeners
    devModal?.querySelector('#import-csv-button')?.addEventListener('click', handleImportCsvButtonClick);
    devModal?.querySelector('#import-all-button')?.addEventListener('click', () => jsonImportInput?.click());
    devModal?.querySelector('#export-csv-button')?.addEventListener('click', exportDataToCSV);
    devModal?.querySelector('#export-all-button')?.addEventListener('click', exportAllDataToJson);
    devModal?.querySelector('#dev-clear-names')?.addEventListener('click', clearUserNames);
    devModal?.querySelector('#dev-clear-entries')?.addEventListener('click', clearAllEntries);
    devModal?.querySelector('#dev-nuke-db')?.addEventListener('click', nukeDatabase);
    devModal?.querySelector('#dev-delete-one-name')?.addEventListener('click', deleteSingleName);
    devModal?.querySelector('#dev-generate-data')?.addEventListener('click', generateTestData);
    if (csvFileInput && !csvFileInput.hasAttribute('data-listener-attached')) { csvFileInput.addEventListener('change', handleCsvFileSelect); csvFileInput.setAttribute('data-listener-attached', 'true'); }
    if (jsonImportInput && !jsonImportInput.hasAttribute('data-listener-attached')) { jsonImportInput.addEventListener('change', (event) => { const file = event.target.files[0]; if (file) { importAllDataFromJson(file); } event.target.value = null; }); jsonImportInput.setAttribute('data-listener-attached', 'true'); }

    // Notes Indicator listener
    notesTextArea?.addEventListener('input', () => { updateNotesIndicator(notesTextArea.value); });

    // --- Initialisation ---
     showBusyIndicator('Initializing...');
     try {
         if(dateInput) dateInput.value = getTodayDateString();
         loadSettings();
         await populateSignedByList();
         await handleDateChange();
         buildCombinedSequence();
         const firstVisibleInput = combinedNavSequence.find(el => el && el.offsetParent !== null && ![saveButton, signedByElement, dayNotesElement].includes(el));
         if (firstVisibleInput) { firstVisibleInput.focus(); console.log(`Initial focus: #${firstVisibleInput.id || firstVisibleInput.classList[0]}`); }
         else if (signedByElement?.offsetParent !== null) { signedByElement.focus(); console.log("Initial focus: #signed-by"); }
         else { console.log("No visible input for initial focus."); }
         checkBackupReminder();
         console.log("Application Initialized");
     } catch (error) { console.error("Init Error:", error); displayStatusMessage("Initialization Error. Check console.", "error", 0); } finally { hideBusyIndicator(); }

}); // End DOMContentLoaded